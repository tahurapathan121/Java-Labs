package com.companyname.springbootcrudrest.controller;

// Import statements

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.validation.Valid;
import java.util.*;

@RestController
@RequestMapping("/api/v1")
public class UserController {

    @Autowired
    private UserRepository userRepository; // Autowire the UserRepository to interact with the database

    // Retrieve all users
    @GetMapping("/users")
    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    // Retrieve a specific user by ID
    @GetMapping("/users/{id}")
    public ResponseEntity<User> getUserById(
            @PathVariable(value = "id") Long userId) throws ResourceNotFoundException {
        // Find user by ID or throw ResourceNotFoundException if not found
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new ResourceNotFoundException("User not found :: " + userId));
        return ResponseEntity.ok().body(user); // Return the user with status code 200 OK
    }

    // Create a new user
    @PostMapping("/users")
    public User createUser(@Valid @RequestBody User user) {
        return userRepository.save(user); // Save the user to the database
    }

    // Update an existing user
    @PutMapping("/users/{id}")
    public ResponseEntity<User> updateUser(
            @PathVariable(value = "id") Long userId,
            @Valid @RequestBody User userDetails) throws ResourceNotFoundException {
        // Find user by ID or throw ResourceNotFoundException if not found
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new ResourceNotFoundException("User not found :: " + userId));

        // Update user details
        user.setEmailId(userDetails.getEmailId());
        user.setLastName(userDetails.getLastName());
        user.setFirstName(userDetails.getFirstName());
        user.setUpdatedAt(new Date()); // Set updated timestamp

        final User updatedUser = userRepository.save(user); // Save the updated user
        return ResponseEntity.ok(updatedUser); // Return the updated user with status code 200 OK
    }

    // Delete an existing user
    @DeleteMapping("/users/{id}")
    public Map<String, Boolean> deleteUser(
            @PathVariable(value = "id") Long userId) throws ResourceNotFoundException {
        // Find user by ID or throw ResourceNotFoundException if not found
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new ResourceNotFoundException("User not found :: " + userId));

        userRepository.delete(user); // Delete the user from the database
        Map<String, Boolean> response = new HashMap<>();
        response.put("deleted", Boolean.TRUE); // Return success response
        return response; // Return response map indicating deletion success
    }
}
